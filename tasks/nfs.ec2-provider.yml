---
- name: Set NFS facts for EC2 creation
  set_fact:
    ec2_instance_hostname_base: "{{ ec2_nfs_node_hostname_short }}"  #  For the benefit of the UDF template
    ec2_instance_fqdn: "{{ ec2_nfs_node_fqdn }}"  #  The UDF template needs to know ec2_instance_fqdn

- name: Set NFS EC2 facts when private subnets are available
  set_fact:
    _nfs_ec2_subnet_id: "{{ aws_vpc_private_subnet_id_list[0] }}" # arbitrarily choose the first private subnet id
    _nfs_ec2_assign_public_ip: no
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) > 0

- name: Set NFS EC2 facts when private subnets are not available
  set_fact:
    _nfs_ec2_subnet_id: "{{ aws_vpc_public_subnet_id_list[0] }}"  # arbitrarily choose the first public subnet id
    _nfs_ec2_assign_public_ip: yes
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) == 0

- name: Create an IAM role to use with our NFS node, so we can attach IAM policies to it.
  iam:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    iam_type: role
    name: "{{ ec2_nfs_node_iam_role_name }}"
    state: present
  register: ec2_nfs_node_iam_role_result

- name: Pause (aws_iam_role_creation_pause_seconds={{ aws_iam_role_creation_pause_seconds }}) to wait for the IAM role to be ready. Trying to use the role too soon will cause the EC2 creation task to fail.
  pause:
    seconds: "{{ aws_iam_role_creation_pause_seconds }}"
  when: ec2_nfs_node_iam_role_result.changed

- name: Create an EC2 NFS node
  ec2:
    key_name: "{{ aws_ssh_keypair_name }}"
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    group_id:
      - "{{ ec2_file_nodes_security_group_id }}"
    instance_type: "{{ ec2_nfs_node_instance_type }}"
    image: "{{ ec2_nfs_node_ami }}"    # Use `AWS_DEFAULT_REGION=XXXXX aws-get-latest-ami-id` from acro infrastructure repo. AMIs are region-specific.
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: "{{ ec2_default_volume_device_name }}"
        volume_type: "{{ ec2_default_volume_type }}"
        volume_size: "{{ ec2_nfs_node_volume_size_gb }}"
        delete_on_termination: true
    vpc_subnet_id: "{{ _nfs_ec2_subnet_id }}"
    assign_public_ip: "{{ _nfs_ec2_assign_public_ip }}"
    #count: 1            # parameters (exact_count|count) are mutually exclusive.
    #state: present      # parameters (exact_count|state) are mutually exclusive.
    count_tag:
      ansible-group-id: "{{ ec2_ansible_group_id }}"    # This is actually what controls how many instances there are.
    exact_count: 1
    termination_protection: true
    ebs_optimized: yes
    instance_profile_name: "{{ ec2_nfs_node_iam_role_name }}"
    instance_tags: "{{ aws_billing_tags | combine({'Name': ec2_instance_pretty_name,
      'ansible-host-id': ec2_nfs_node_fqdn,
      'ansible-group-id': ec2_ansible_group_id })  }}"
    user_data: "{{ lookup('template', ec2_udf_template_path ) }}"
  register: ec2_filenode_result

- debug:
    var: ec2_filenode_result
    verbosity: 1

- name: set nfs_endpoint variable
  set_fact:
    nfs_endpoint: "{{ ec2_filenode_result.tagged_instances[0].private_ip }}"

- debug:
    var: nfs_endpoint
    verbosity: 1

- name: Get file node volume ID
  ec2_vol:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    instance: "{{ ec2_filenode_result.tagged_instances[0].id }}"
    state: list
  register: filenode_vol_result

- debug:
    var: filenode_vol_result
    verbosity: 1

- name: Apply tags to file node volumes
  ec2_tag:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    resource: "{{ item.id }}"
    state: present
    tags: "{{ aws_billing_tags | combine({'Name': ec2_nfs_node_fqdn + ' ' + item.attachment_set.device }) }}"
  with_items: "{{ filenode_vol_result.volumes }}"
  register: filenode_vol_tag_result

- debug:
    var: filenode_vol_tag_result
    verbosity: 1

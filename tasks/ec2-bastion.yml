---
- set_fact:
    ec2_instance_short_hostname: "{{ aws_resource_tag_slug.lower() }}-{{ ec2_env_slug.lower() }}-bastion"

- set_fact:
    ec2_instance_fqdn: "{{ ec2_instance_short_hostname }}.{{ route53_hosted_domain.lower() }}"

- set_fact:
    ec2_instance_pretty_name: "ANSIBLE {{ aws_resource_tag_slug }} {{ ec2_env_slug }} bastion"

- name: Create a bastion host
  ec2:
    key_name: "{{ aws_ssh_keypair_name }}"
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    group_id:
      - "{{ ec2_group_bastion_result.group_id }}"
    instance_type: "{{ ec2_bastion_config.instance_type }}"
    image: "{{ ec2_bastion_config.ami }}"    # Use `AWS_DEFAULT_REGION=XXXXX aws-get-latest-ami-id` from acro infrastructure repo. Dont forget, AMIs are region-specific.
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_bastion_config.volume_size_gb }}"
    vpc_subnet_id: "{{  public_subnet_result['results'][0]['subnet']['id'] }}"
    assign_public_ip: yes
    #count: 1            # parameters (exact_count|count) are mutually exclusive.
    #state: present      # parameters (exact_count|state) are mutually exclusive.
    count_tag:
      ansible-host-id: "{{ ec2_instance_fqdn }}"    # This is actually what controls how many instances there are.
    exact_count: 1
    termination_protection: true
    ebs_optimized: yes
    #instance_profile_name: "Server"   # AKA "IAM Role from the AWS console"
    instance_tags: "{{ aws_billing_tags | combine({'Name': ec2_instance_pretty_name, 'ansible-host-id': ec2_instance_fqdn })  }}"
    user_data: "{{ lookup('template', ec2_udf_template_path ) }}"
  register: ec2_bastion_result

- debug:
    var: ec2_bastion_result
    verbosity: 1

- name: Create an Elastic IP for the bastion
  ec2_eip:
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    allow_reassociation: false
    device_id: "{{ ec2_bastion_result.tagged_instances[0].id }}"
  register: bastion_eip_result

- debug:
    var: bastion_eip_result
    verbosity: 1

- name: Create a DNS record for the bastion's EIP
  route53:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    state: present
    zone: "{{ route53_hosted_domain }}"
    record: "{{ ec2_instance_short_hostname }}.{{ route53_hosted_domain }}."
    type: A
    ttl: 3600
    value: "{{ bastion_eip_result.public_ip }}"
    overwrite: true
  register: bastion_dns_result

- debug:
    var: bastion_dns_result
    verbosity: 1

- name: Tag the bastion's elastic IP(s)
  ec2_tag:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    resource: "{{ bastion_eip_result.allocation_id }}"
    state: present
    tags: "{{ aws_billing_tags | combine({'Name': 'ANSIBLE ' + aws_resource_tag_slug + ' Bastion EIP'}) }}"
  register: bastion_eip_tag_result

- debug:
    var: bastion_eip_tag_result
    verbosity: 1

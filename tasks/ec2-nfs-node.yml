---
- set_fact:
    ec2_instance_pretty_name: "{{ aws_resource_tag_slug + ' ' + aws_resource_env_slug + ' NFS ' + aws_resource_name_suffix | trim }}"

- set_fact:
    ec2_instance_hostname_base: "{{ ec2_nfs_node_hostname_short }}"  #  For the benefit of the UDF template
    ec2_instance_fqdn: "{{ ec2_nfs_node_fqdn }}"  #  The UDF template needs to know ec2_instance_fqdn

- name: Create a NFS node on the private subnet
  ec2:
    key_name: "{{ aws_ssh_keypair_name }}"
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    group_id:
      - "{{ ec2_file_nodes_security_group_id }}"
    instance_type: "{{ ec2_nfs_node_instance_type }}"
    image: "{{ ec2_nfs_node_ami }}"    # Use `AWS_DEFAULT_REGION=XXXXX aws-get-latest-ami-id` from acro infrastructure repo. AMIs are region-specific.
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_nfs_node_volume_size_gb }}"
    vpc_subnet_id: "{{ aws_vpc_private_subnet_id_list[0] }}" # Theres' only one file node, it can just be on the first private subnet.
    assign_public_ip: no
    #count: 1            # parameters (exact_count|count) are mutually exclusive.
    #state: present      # parameters (exact_count|state) are mutually exclusive.
    count_tag:
      ansible-host-id: "{{ ec2_nfs_node_fqdn }}"    # This is actually what controls how many instances there are.
    exact_count: 1
    termination_protection: true
    ebs_optimized: yes
    #instance_profile_name: "Server"   # AKA "IAM Role from the AWS console"
    instance_tags: "{{ aws_billing_tags | combine({'Name': ec2_instance_pretty_name, 'ansible-host-id': ec2_nfs_node_fqdn })  }}"
    user_data: "{{ lookup('template', ec2_udf_template_path ) }}"
  register: ec2_filenode_result

- debug:
    var: ec2_filenode_result
    verbosity: 1

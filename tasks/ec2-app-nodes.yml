---
- set_fact:
    ec2_instance_pretty_name: "{{ aws_resource_tag_slug + ' ' + aws_resource_env_slug + ' app ' + aws_resource_name_suffix | trim }}"
    ec2_ansible_group_id: "{{ aws_resource_tag_slug.lower() }}-{{ aws_resource_env_slug.lower() }}-app" # this controls how many instances are launched

- set_fact:
    ec2_instance_hostname_base: "{{ ec2_app_node_hostname_short }}"  #  For the benefit of the UDF template
    ec2_instance_fqdn: "{{ ec2_app_node_fqdn }}"  #  For the benefit of the UDF template

- name: "Create {{ ec2_app_node_count_per_subnet }} app node(s) per private subnet"
  ec2:
    key_name: "{{ aws_ssh_keypair_name }}"
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    group_id:
      - "{{ ec2_group_app_result.group_id }}"
    instance_type: "{{ ec2_app_node_instance_type }}"
    image: "{{ ec2_app_node_ami }}"    # Use `AWS_DEFAULT_REGION=XXXXX aws-get-latest-ami-id` from acro infrastructure repo. AMIs are region-specific.
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: "{{ ec2_default_volume_device_name }}"
        volume_type: "{{ ec2_default_volume_type }}"
        volume_size: "{{ ec2_app_node_volume_size_gb }}"
        delete_on_termination: true
    vpc_subnet_id: "{{ item }}"
    assign_public_ip: no
    #count: 1            # parameters (exact_count|count) are mutually exclusive.
    #state: present      # parameters (exact_count|state) are mutually exclusive.
    count_tag:
      ansible-group-id: "{{ ec2_ansible_group_id }}"    # This is actually what controls how many instances there are.
    exact_count: "{{ ec2_app_node_count_per_subnet }}"
    termination_protection: true
    ebs_optimized: yes
    #instance_profile_name: "Server"   # AKA "IAM Role from the AWS console"
    instance_tags: "{{ aws_billing_tags | combine({'Name': ec2_instance_pretty_name,
      'ansible-host-id': ec2_app_node_fqdn,
      'ansible-group-id': ec2_ansible_group_id })  }}"
    user_data: "{{ lookup('template', ec2_udf_template_path ) }}"
  loop: "{{ aws_vpc_private_subnet_id_list }}"
  register: ec2_appnode_result

- debug:
    var: ec2_appnode_result
    verbosity: 1

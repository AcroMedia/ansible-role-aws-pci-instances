---
- set_fact:
    ec2_ansible_group_id: "{{ aws_resource_tag_slug.lower() }}-{{ aws_resource_env_slug.lower() }}-app" # this controls how many instances are launched per subnet
    ec2_instance_pretty_name: "{{ aws_resource_tag_slug + ' ' + aws_resource_env_slug + ' app ' + aws_resource_name_suffix | trim }}"    # sets the Name tag in the AWS UX.
    ec2_instance_hostname_base: "{{ ec2_app_node_hostname_short }}"  #  For the benefit of the UDF template; the Instance ID will be appended to it, and FQDN constructed from that.

- name: Set facts for app nodes when they reside in private subnets
  set_fact:
    _app_node_assign_public_ip: no    # only used in the ec2 create task below.
    _app_node_loop_var: "{{ aws_vpc_private_subnets_with_ids }}"     # Only used in the ec2 creation task below. The aws_vpc_private_subnets_with_ids var was generated by the pci-network role.
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) > 0

- name: Set facts for app nodes when they reside in public subnets
  set_fact:
    _app_node_assign_public_ip: yes      # only used in the ec2 create task below.
    _app_node_loop_var: "{{ aws_vpc_public_subnets_with_ids }}"      # Only used in the ec2 creation task below. The aws_vpc_public_subnets_with_ids var was Generated by the pci-network role.
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) == 0

- name: "Create {{ ec2_app_node_count_per_subnet }} app node(s) per subnet"
  ec2:
    key_name: "{{ aws_ssh_keypair_name }}"
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    group_id:
      - "{{ ec2_group_app_result.group_id }}"
    instance_type: "{{ ec2_app_node_instance_type }}"
    image: "{{ ec2_app_node_ami }}"    # Use `AWS_DEFAULT_REGION=XXXXX aws-get-latest-ami-id` from acro infrastructure repo. AMIs are region-specific.
    wait: yes
    wait_timeout: 600
    volumes:
      - device_name: "{{ ec2_default_volume_device_name }}"
        volume_type: "{{ ec2_default_volume_type }}"
        volume_size: "{{ ec2_app_node_volume_size_gb }}"
        delete_on_termination: true
    vpc_subnet_id: "{{ item.id }}"
    assign_public_ip: "{{ _app_node_assign_public_ip }}"
    #count: 1            # parameters (exact_count|count) are mutually exclusive.
    #state: present      # parameters (exact_count|state) are mutually exclusive.
    count_tag:
      ansible-group-id: "{{ ec2_ansible_group_id }}"    # This is actually what controls how many instances there are.
    exact_count: "{{ item.app_node_count | default(ec2_app_node_count_per_subnet) }}"
    termination_protection: true
    ebs_optimized: yes
    #instance_profile_name: "Server"   # AKA "IAM Role from the AWS console"
    instance_tags: "{{ aws_billing_tags | combine({'Name': ec2_instance_pretty_name,
      'ansible-host-id': ec2_app_node_hostname_short,
      'ansible-group-id': ec2_ansible_group_id })  }}"
    user_data: "{{ lookup('template', ec2_udf_template_path ) }}"
  loop: "{{ _app_node_loop_var }}"
  register: ec2_appnode_result

- debug:
    var: ec2_appnode_result
    verbosity: 1

- name: Get app node instance ids
  set_fact:
    ec2_app_node_instance_ids: "{{ ec2_appnode_result.results | json_query(query) }}"
  vars:
    query: "[].tagged_instances[].id"

- debug:
    var: ec2_app_node_instance_ids
    verbosity: 1

- name: Get app node volume info
  ec2_vol:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    instance: "{{ item }}"
    state: list
  with_items: "{{ ec2_app_node_instance_ids }}"
  register: appnode_vol_result

- name: Flatten volume info by one level
  set_fact:
    ec2_app_node_volume_info: "{{ appnode_vol_result.results | json_query(query) }}"
  vars:
    query: "[].volumes"

- debug:
    var: ec2_app_node_volume_info
    verbosity: 1

- name: Apply tags to app node volumes
  ec2_tag:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    resource: "{{ item.id }}"
    state: present
    tags: "{{ aws_billing_tags | combine({'Name': ec2_app_node_fqdn + ' ' + item.attachment_set.device }) }}"
  with_items: "{{ ec2_app_node_volume_info }}"
  register: appnode_vol_tag_result

- debug:
    var: appnode_vol_tag_result
    verbosity: 1

- name: Make ansible host ID tags on app nodes match what we've set for internal hostnames, for easier identification and monitoring
  ec2_tag:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
    resource: "{{ item }}"
    state: present
    tags:
      ansible-host-id: "{{ ec2_app_node_hostname_short }}-{{  item }}"
  with_items: "{{ ec2_app_node_instance_ids }}"

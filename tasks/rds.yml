---
- set_fact:
    rds_db_subnet_group_name: "{{ aws_resource_tag_slug.lower() }}-{{ aws_resource_env_slug.lower() }}-db-subnet-group-by-ansible"

- name: Configure the RDS DB subnet group
  rds_subnet_group:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    description: "{{ aws_resource_tag_slug + ' ' + aws_resource_env_slug + ' DB subnet group ' + aws_resource_name_suffix | trim }}"
    name: "{{ rds_db_subnet_group_name }}"
    region: "{{ aws_vpc_region }}"
    state: present
    subnets: "{{ private_subnet_result['results'] | map(attribute='subnet') | map(attribute='id') | list }}"

- name: Configure an RDS instance
  rds_instance:   #  See https://docs.ansible.com/ansible/latest/modules/rds_instance_module.html
    allocated_storage: "{{ rds_allocated_storage_gb }}"
    allow_major_version_upgrade: no
    apply_immediately: no
    auto_minor_version_upgrade: yes
    availability_zone: "{{ rds_availability_zone }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    backup_retention_period: "{{ rds_backup_retention_days }}"
    #character_set_name: let it use default
    copy_tags_to_snapshot: yes
    db_instance_class: "{{ rds_instance_class }}"
    db_name: "{{ rds_db_name }}"
    db_instance_identifier: "{{ rds_db_instance_identifier }}"
    db_subnet_group_name: "{{ rds_db_subnet_group_name }}"
    enable_cloudwatch_logs_exports: []
    # enable_iam_database_authentication:  @TODO see if we can use this; this sounds great!
    enable_performance_insights: no
    engine: "{{ rds_engine }}"
    engine_version: "{{ rds_engine_version }}"
    # force_failover: n/a - only used with multi-az. Set to true to conduct the reboot through a MultiAZ failover.
    force_update_password: no
    # kms_key_id: n/a - Default AWS-managed key will be used, and auto-created if it doesn't yet exist.
    master_user_password: "{{ mysql_master_password }}"
    master_username: "{{ mysql_master_username }}"
    # max_allocated_storage: n/a - The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
    # multi_az: n/a - (availability_zone|multi_az) are mutually exclusive
    port: 3306
    preferred_backup_window: "05:00-07:59"  # in UTC
    preferred_maintenance_window: "sun:08:00-sun:11:00"  # in UTC
    publicly_accessible: no
    purge_tags: no
    region: "{{ aws_vpc_region }}"
    state: present
    storage_encrypted: yes
    storage_type: gp2
    tags: "{{ aws_billing_tags }}"
    #timezone: Have we ever used this feature? I've never seen it as an option
    wait: "{{ rds_wait }}"
    vpc_security_group_ids:
      - "{{ ec2_group_db_result.group_id }}"
  register: rds_instance_result

- debug:
    var: rds_instance_result
    verbosity: 1

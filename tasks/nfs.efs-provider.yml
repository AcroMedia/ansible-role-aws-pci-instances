---
- name: Create EFS tags list
  set_fact:
    efs_tags: "{{
      aws_billing_tags | combine({
        'Name': efs_name,
        'ansible-host-id': efs_name
        })
      }}"

- name: Set EFS facts when private subnets are available
  set_fact:
    _efs_subnet_id_list: "{{ private_subnet_result['results'] | map(attribute='subnet') | map(attribute='id') | list }}"
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) > 0

- name: Set EFS facts when private subnets are not available
  set_fact:
    _efs_subnet_id_list: "{{ public_subnet_result['results'] | map(attribute='subnet') | map(attribute='id') | list }}"
  when: aws_vpc_private_subnets is not string
    and (aws_vpc_private_subnets | length) == 0

- name: Build EFS target list as json string
  set_fact:
    efs_target_list_as_json: '[
      {% for subnet_id in _efs_subnet_id_list %}
      {% if loop.index0 > 0 %},{% endif %}
      {
      "subnet_id": "{{ subnet_id }}",
      "security_groups": ["{{ ec2_file_nodes_security_group_id }}"]
      }
      {% endfor %}
      ]'

- name: Create an elastic file system (EFS) with one mount point per subnet
  efs:
    state: present
    region: "{{ aws_vpc_region }}"
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    name: "{{ efs_name }}"
    tags: "{{ efs_tags }}"
    throughput_mode: "{{ efs_throughput_mode }}"
    performance_mode: "{{ efs_performance_mode }}"
    # provisioned_throughput_in_mibps: # would be reuqired if performance_mode == max_io
    wait: "{{ efs_wait }}"
    wait_timeout: "{{ efs_wait_timeout }}"
    encrypt: "{{ efs_encrypt }}"
    targets: "{{ efs_target_list_as_json }}"
  register: efs_result

- name: debug efs_result
  debug:
    var: efs_result
    verbosity: 1

- name: Set nfs_endpoint variable
  set_fact:
    efs_address: "{{ efs_result.efs.filesystem_address }}"
    nfs_endpoint: "{{ efs_result.efs.filesystem_address.split(':')[0] }}"

- name: nfs_endpoint
  debug:
    var: nfs_endpoint
    verbosity: 1

- name: Create an empty array, which we will populate with individual 'efs_access_point_result' items, since each efs_access_point_result will overwrite the previous one because of the include loop.
  set_fact:
    efs_access_points_results: []

- name: Get list of current access points, because the 'create-access-point' command is not actually idempotent, as the docs claim.
  command: >
    aws efs describe-access-points --query 'AccessPoints[*].ClientToken'
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_api_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_api_secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws_vpc_region }}"
  register: existing_efs_access_points

- name: Create EFS Access Point(s)
  include_tasks: nfs.efs-create-access-point.yml
  with_items: "{{ efs_access_points }}"

- debug:
    var: efs_access_points_results
    #verbosity: 1  # @TODO: Uncomment when finished working with EFS access points.

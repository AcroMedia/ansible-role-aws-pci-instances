---
# A Replication Group (old terminology) on the command line is now referred to as a Cluster in the Amazon UI:
# See https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.Terms.html for details

- name: See if an elasticache replication group has already been created
  command: >
    aws elasticache describe-replication-groups
    --replication-group-id "{{ elasticache_cluster_name }}"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_api_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_api_secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws_vpc_region }}"
  ignore_errors: true
  register: repl_group_sniff_result

- name: 'Configure a multi-az elasticache replication group - See https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.Terms.html'
  command: >
    aws elasticache create-replication-group
    --replication-group-id "{{ elasticache_cluster_name }}"
    --replication-group-description "{{ elasticache_cluster_name }}"
    --automatic-failover-enabled
    --num-node-groups 1
    --replicas-per-node-group "{{ (elasticache_num_nodes - 1) }}"
    --cache-node-type "{{ elasticache_instance_type }}"
    --engine "{{ elasticache_engine }}"
    --engine-version "{{ elasticache_engine_version }}"
    --cache-subnet-group-name "{{ elasticache_subnet_group_name }}"
    --security-group-ids "{{ ec2_cache_nodes_security_group_id }}"
    --tags '{{ aws_billing_tags | dict2items(key_name='Key', value_name='Value')  | to_json }}'
    --preferred-maintenance-window "sun:08:00-sun:11:00"
    --port "{{ elasticache_port }}"
    --auto-minor-version-upgrade
    --snapshot-retention-limit 0
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_api_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_api_secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws_vpc_region }}"
  register: elasticache_replication_group_result
  when: repl_group_sniff_result.failed == true

- debug:
    var: elasticache_replication_group_result
    verbosity: 1

- fail:
    msg: stop
  when: true


## GET REDIS ENDPOINT ...

- name: Look up replication_group_data info (since it doesn't exist in elasticache_info) so we can find the redis endpoint
  command: >
    aws elasticache describe-replication-groups
    --replication-group-id {{ elasticache_cluster_name }}
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_api_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_api_secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws_vpc_region }}"
  register: describe_replication_groups_result

- debug:
    var: describe_replication_groups_result
    verbosity: 1

- name: Convert replication_group_data to a more useful format
  set_fact:
    replication_group_data: "{{ describe_replication_groups_result.stdout | from_json }}"

- debug:
    var: replication_group_data
    verbosity: 1

- name: Set redis_endpoint variable
  set_fact:
    redis_endpoint: '{{ replication_group_data.ReplicationGroups[0].NodeGroups[0].PrimaryEndpoint.Address }}'

- debug:
    var: redis_endpoint
    verbosity: 1


### TAG RESOURCES ....

- name: Get the current caller identity information so we can tag resources
  aws_caller_info:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
  register: _caller_info

- name: Get elasticache cluster info so we can tag resources
  elasticache_info:
    aws_access_key: "{{ aws_api_access_key }}"
    aws_secret_key: "{{ aws_api_secret_key }}"
    region: "{{ aws_vpc_region }}"
  register: elasticache_info_result

- debug:
    var: elasticache_info_result
    verbosity: 1

- name: Look up cluster node ARNs
  set_fact:
    elasticache_cluster_arns: '[
      {% for clust in elasticache_info_result.elasticache_clusters %}
      {% if (loop.index0 > 0) %}
      ,
      {% endif %}
      {
      "elasticache_cluster_arn": "arn:aws:elasticache:{{ aws_vpc_region }}:{{ _caller_info.account }}:cluster:{{ clust.cache_cluster_id }}"
      }
      {% endfor %}
      ]'

- debug:
    var: elasticache_cluster_arns
    verbosity: 1

- name: Tag elasticache replication group nodes manually because the elasticache module does not yet support tagging
  command: >
    aws elasticache add-tags-to-resource
    --resource-name '{{ item.elasticache_cluster_arn }}'
    --tags '{{ aws_billing_tags | dict2items(key_name='Key', value_name='Value')  | to_json }}'
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_api_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_api_secret_key }}"
    AWS_DEFAULT_REGION: "{{ aws_vpc_region }}"
  when: (aws_billing_tags | length) > 0
  register: elasticache_repl_nodes_tag_result
  with_items: "{{ elasticache_cluster_arns }}"

- debug:
    var: elasticache_repl_nodes_tag_result
    verbosity: 1
